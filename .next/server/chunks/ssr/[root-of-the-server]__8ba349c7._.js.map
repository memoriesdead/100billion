{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kevin/Desktop/tiktok-clone/src/app/ClientBody.tsx"],"sourcesContent":["\"use client\";\r\n\r\n// Removed useEffect as it's redundant with RootLayout setting the body class\r\n\r\nexport default function ClientBody({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) {\r\n  // Render a div instead of a nested body tag\r\n  return (\r\n    <div className=\"min-h-screen bg-background text-foreground antialiased\">\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAIe,SAAS,WAAW,EACjC,QAAQ,EAGT;IACC,4CAA4C;IAC5C,qBACE,8OAAC;QAAI,WAAU;kBACZ;;;;;;AAGP","debugId":null}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kevin/Desktop/tiktok-clone/src/lib/supabaseClient.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\nimport type { Database } from './database.types'; // Import generated types\r\n\r\n// --- Supabase Configuration ---\r\n// Read keys from environment variables (ensure they are prefixed with NEXT_PUBLIC_ for client-side access)\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\r\n\r\nif (!supabaseUrl) {\r\n  throw new Error(\"Supabase URL is missing. Make sure NEXT_PUBLIC_SUPABASE_URL is set in your environment variables.\");\r\n}\r\nif (!supabaseAnonKey) {\r\n  throw new Error(\"Supabase Anon Key is missing. Make sure NEXT_PUBLIC_SUPABASE_ANON_KEY is set in your environment variables.\");\r\n}\r\n\r\n// Initialize Supabase Client\r\n// The client automatically handles auth state changes when using Supabase Auth methods.\r\nexport const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, { // Use generated types\r\n  auth: {\r\n    // Enable automatic token refreshing\r\n    autoRefreshToken: true,\r\n    // Persist session across browser tabs/windows\r\n    persistSession: true,\r\n    // Detect session automatically from URL fragment (useful for OAuth redirects)\r\n    detectSessionInUrl: true,\r\n  },\r\n});\r\n"],"names":[],"mappings":";;;AAAA;;AAGA,iCAAiC;AACjC,2GAA2G;AAC3G,MAAM;AACN,MAAM;AAEN,uCAAkB;;AAElB;AACA,uCAAsB;;AAEtB;AAIO,MAAM,WAAW,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAY,aAAa,iBAAiB;IAC3E,MAAM;QACJ,oCAAoC;QACpC,kBAAkB;QAClB,8CAA8C;QAC9C,gBAAgB;QAChB,8EAA8E;QAC9E,oBAAoB;IACtB;AACF","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kevin/Desktop/tiktok-clone/src/context/AuthContext.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\r\nimport { Session, User } from '@supabase/supabase-js';\r\nimport { supabase } from '@/lib/supabaseClient'; // Import Supabase client from the new file\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  session: Session | null; // Add session state\r\n  loading: boolean;\r\n  signInWithGoogle: () => Promise<void>;\r\n  signUpWithEmail: (email: string, password: string) => Promise<void>;\r\n  signInWithEmail: (email: string, password: string) => Promise<void>;\r\n  sendPasswordReset: (email: string) => Promise<void>;\r\n  signOut: () => Promise<void>;\r\n}\r\n\r\n// Export the context itself\r\nexport const AuthContext = createContext<AuthContextType>({\r\n  user: null,\r\n  session: null,\r\n  loading: true,\r\n  // Provide dummy implementations for context default value\r\n  signInWithGoogle: async () => { console.warn(\"signInWithGoogle called before AuthProvider initialized\"); },\r\n  signUpWithEmail: async () => { console.warn(\"signUpWithEmail called before AuthProvider initialized\"); },\r\n  signInWithEmail: async () => { console.warn(\"signInWithEmail called before AuthProvider initialized\"); },\r\n  sendPasswordReset: async () => { console.warn(\"sendPasswordReset called before AuthProvider initialized\"); },\r\n  signOut: async () => { console.warn(\"signOut called before AuthProvider initialized\"); },\r\n});\r\n\r\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [session, setSession] = useState<Session | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // 1. Check initial session state\r\n    const fetchSession = async () => {\r\n      try {\r\n        const { data: { session: currentSession }, error } = await supabase.auth.getSession();\r\n        if (error) throw error;\r\n        setSession(currentSession);\r\n        setUser(currentSession?.user ?? null);\r\n      } catch (error) {\r\n        console.error(\"Error fetching initial Supabase session:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchSession();\r\n\r\n    // 2. Listen for Supabase auth state changes\r\n    const { data: authListener } = supabase.auth.onAuthStateChange(\r\n      async (_event, currentSession) => {\r\n        console.log(\"Supabase auth state changed:\", _event, currentSession);\r\n        setSession(currentSession);\r\n        setUser(currentSession?.user ?? null);\r\n        // No need to manually set loading false here unless fetchSession hasn't finished\r\n        // setLoading(false); // Might cause flicker if fetchSession is slow\r\n      }\r\n    );\r\n\r\n    // Cleanup listener on unmount\r\n    return () => {\r\n      authListener?.subscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  // --- Authentication Functions (Supabase) ---\r\n\r\n  const signInWithGoogle = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const { error } = await supabase.auth.signInWithOAuth({\r\n        provider: 'google',\r\n        // options: { redirectTo: window.location.origin } // Optional: Redirect URL after login\r\n      });\r\n      if (error) throw error;\r\n      // Auth state listener will handle setting user/session and loading state\r\n    } catch (error) {\r\n      console.error(\"Error signing in with Google (Supabase):\", error);\r\n      setLoading(false); // Ensure loading is false on error\r\n      // Handle error (e.g., show notification to user)\r\n    }\r\n  };\r\n\r\n  const signUpWithEmail = async (email: string, password: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const { data, error } = await supabase.auth.signUp({\r\n        email,\r\n        password,\r\n        // options: { emailRedirectTo: window.location.origin } // Optional: For email verification link\r\n      });\r\n      if (error) throw error;\r\n      // Inform user to check email for verification if enabled\r\n      if (data.user && !data.user.email_confirmed_at) {\r\n         console.log(\"Sign up successful. Please check your email for verification.\");\r\n         // Add UI feedback here\r\n      }\r\n      // Auth state listener handles user/session update\r\n    } catch (error) {\r\n      console.error(\"Error signing up (Supabase):\", error);\r\n      setLoading(false);\r\n      // Handle specific errors and inform user\r\n    }\r\n  };\r\n\r\n  const signInWithEmail = async (email: string, password: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const { error } = await supabase.auth.signInWithPassword({\r\n        email,\r\n        password,\r\n      });\r\n      if (error) throw error;\r\n      // Auth state listener handles user/session update\r\n    } catch (error) {\r\n      console.error(\"Error signing in (Supabase):\", error);\r\n      setLoading(false);\r\n       // Handle specific errors and inform user\r\n    }\r\n  };\r\n\r\n  const sendPasswordReset = async (email: string) => {\r\n     try {\r\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\r\n        // redirectTo: `${window.location.origin}/update-password`, // URL for password update form\r\n      });\r\n      if (error) throw error;\r\n      console.log(\"Password reset email sent (Supabase).\");\r\n      // Inform user via UI that the email was sent\r\n    } catch (error) {\r\n      console.error(\"Error sending password reset email (Supabase):\", error);\r\n      // Handle error and inform user\r\n    }\r\n  };\r\n\r\n  const signOut = async () => {\r\n    try {\r\n      const { error } = await supabase.auth.signOut();\r\n      if (error) throw error;\r\n      // Auth state listener will handle setting user/session to null\r\n      console.log(\"Supabase sign out successful.\");\r\n    } catch (error) {\r\n      console.error(\"Error signing out from Supabase:\", error);\r\n      // Handle error if needed\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    session, // Expose session\r\n    loading,\r\n    signInWithGoogle,\r\n    signUpWithEmail,\r\n    signInWithEmail,\r\n    sendPasswordReset,\r\n    signOut\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {/* Render children only when initial loading is complete */}\r\n      {!loading ? children : <div>Loading Authentication...</div> /* Or a proper spinner */}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Update useAuth hook if needed (no change needed here)\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 287, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/kevin/Desktop/tiktok-clone/src/components/Providers.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\r\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\r\nimport { AuthProvider } from '@/context/AuthContext'; // Import AuthProvider\r\n\r\nexport default function Providers({ children }: { children: React.ReactNode }) {\r\n  // Use useState to ensure QueryClient is only created once per component instance\r\n  const [queryClient] = useState(() => new QueryClient({\r\n    defaultOptions: {\r\n      queries: {\r\n        // Optional: configure default query options here\r\n        // staleTime: 60 * 1000, // 1 minute\r\n      },\r\n    },\r\n  }));\r\n\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <AuthProvider> {/* Wrap children with AuthProvider */}\r\n        {children}\r\n      </AuthProvider>\r\n      {/* Optional: Add React Query DevTools for debugging */}\r\n      {/* <ReactQueryDevtools initialIsOpen={false} /> */}\r\n    </QueryClientProvider>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AAEA,8NAAsD,sBAAsB;AAL5E;;;;;AAOe,SAAS,UAAU,EAAE,QAAQ,EAAiC;IAC3E,iFAAiF;IACjF,MAAM,CAAC,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,IAAM,IAAI,6KAAA,CAAA,cAAW,CAAC;YACnD,gBAAgB;gBACd,SAAS;gBAGT;YACF;QACF;IAEA,qBACE,8OAAC,sLAAA,CAAA,sBAAmB;QAAC,QAAQ;kBAC3B,cAAA,8OAAC,8HAAA,CAAA,eAAY;;gBAAC;gBACX;;;;;;;;;;;;AAMT","debugId":null}}]
}